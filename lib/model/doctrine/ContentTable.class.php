<?php

/**
 * ContentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContentTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ContentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Content');
    }
    
    
    private static function params($q, $params = array())
    {
        $q->from('Content c');
        # categoryRoute
        if(isset($params['categoryRoute']) && $params['categoryRoute'] != null)
            $q->innerJoin('c.CategoryContent cc on cc.content_id = c.id')
              ->innerJoin('cc.Category cat on cc.category_id = cat.id')
              ->where('cat.route =?', $params['categoryRoute']);
              
        # categoryId where in
        if(isset($params['categoryIdIn']) && $params['categoryIdIn'] != null)
            $q->innerJoin('c.CategoryContent cc on cc.content_id = c.id')
              ->innerJoin('cc.Category cat on cc.category_id = cat.id')
              ->andWhereIn('cat.id', $params['categoryIdIn']);
        
        # categoryId where not in
        if(isset($params['categoryIdNotIn']) && $params['categoryIdNotIn'] != null)
            $q->innerJoin('c.CategoryContent cc on cc.content_id = c.id')
              ->innerJoin('cc.Category cat on cc.category_id = cat.id')
              ->andWhereNotIn('cat.id', $params['categoryIdNotIn']);

        # id
        if(isset($params['id']) && $params['id'] != null)
            $q->andWhere('id = ?', $params['id']);
        if(isset($params['idO']) && $params['idO'] != null)
            $q->andWhere('id <> ?', $params['idO']);
        if(isset($params['idGt']) && $params['idGt'] != null)
            $q->andWhere('id > ?', $params['idGt']);
        if(isset($params['idLt']) && $params['idLt'] != null)
            $q->andWhere('id < ?', $params['idLt']);
        if(isset($params['ids']) && sizeof($params['ids']))
            $q->andWhereIn('id', $params['ids']);
        if(isset($params['idsO']) && sizeof($params['idsO']))
            $q->andWhereNotIn('id', $params['idsO']);
            
        # route
        if(isset($params['route']) && $params['route'] != null)
            $q->andWhere('route= ?', $params['route']);

        # createdAt
        if(isset($params['createdAtGt']) && $params['createdAtGt'] != null)
            $q->andWhere('created_at >= ?', $params['createdAtGt']);
        if(isset($params['createdAtLt']) && $params['createdAtLt'] != null)
            $q->andWhere('created_at <= ?', $params['createdAtLt']);
			
		# postAt
        if(isset($params['postAtGt']) && $params['postAtGt'] != null)
            $q->andWhere('post_at >= ?', $params['postAtGt']);
        if(isset($params['postAtLt']) && $params['postAtLt'] != null)
            $q->andWhere('post_at <= ?', $params['postAtLt']);
            
        # isActive
        if(isset($params['isActive'])) {
            if($params['isActive'] != "all" && in_array($params['isActive'], array('0', '1'))) {
                $q->andWhere('is_active = ?', $params['isActive']);
            }
        } else {
            $q->andWhere('is_active = ?', 1);
        }
        
        # isFeatured
        if(isset($params['isFeatured']) && in_array($params['isFeatured'], array('0', '1'))) 
            $q->andWhere('is_featured = ?', 1);
        if(isset($params['isTop']) && in_array($params['isTop'], array('0', '1'))) 
            $q->andWhere('is_top = ?', 1);
        if(isset($params['isNew']) && in_array($params['isNew'], array('0', '1'))) 
            $q->andWhere('is_new = ?', 1);
        if(isset($params['isDiscuss']) && in_array($params['isDiscuss'], array('0', '1'))) 
            $q->andWhere('is_discuss = ?', 1);

        if(isset($params['s']) && $params['s'] != null)
            $q->andWhere('title LIKE ? OR intro LIKE ? OR body LIKE ?', array('%'.$params['s'].'%','%'.$params['s'].'%','%'.$params['s'].'%'));

        # group, order, limit
        if(isset($params['groupBy']) && $params['groupBy']) 
            $q->groupBy($params['groupBy']);

        if(isset($params['offset']) && $params['offset'])
            $q->offset($params['offset']);
        
        $limit = isset($params['limit']) ? $params['limit'] : sfConfig::get('app_limit', 30);
        $q->limit($limit);
  
        $order = isset($params['orderBy']) ? $params['orderBy'] : 'sort DESC, created_at DESC, title ASC';
        $q->orderBy($order);

        return $q;
    }
    

    public static function doExecute($columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($q, $params);
        return $q->execute();
    }
    
  
    public static function doFetchArray($columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($q, $params);
        return $q->fetchArray();
    }
    
    
    public static function doFetchSelection($fieldName, $columns = array(), $params = array())
    {
        $res = array();
        $rss = self::doFetchArray($columns, $params);
        foreach ($rss as $rs) 
        {
            $res[$rs['id']] = $rs[$fieldName];
        }
        return $res;
    }
    
    public static function doFetchOne($columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $params['limit'] = 1;
        $q = self::params($q, $params);
        return $q->fetchOne();
    }
    
    
    public static function getPager($columns = array(), $params = array(), $page=1)
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($q, $params);

        $pager = new sfDoctrinePager(sfConfig::get('app_pager', 30));
        $pager->setPage(GlobalLib::clearInput(intval($page)));
        $pager->setQuery($q);
        $pager->init();
        
        return $pager;
    }
    
    public static function doCount($params = array())
    {
        $q = Doctrine_Query::create()->select('count(id)');
        $q = self::params($q, $params);
        return $q->count();
    }
}