<?php

/**
 * CouponTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class GlobalTable extends Doctrine_Table
{
    private static function params($tableName, $q, $params = array())
    {
        $q->from($tableName);

        # id
        if(isset($params['id']) && $params['id'] != null)
            $q->andWhere('id = ?', $params['id']);
        if(isset($params['idO']) && $params['idO'] != null)
            $q->andWhere('id <> ?', $params['idO']);
        if(isset($params['ids']) && sizeof($params['ids']))
            $q->andWhereIn('id', $params['ids']);
        if(isset($params['idsO']) && sizeof($params['idsO']))
            $q->andWhereNotIn('id', $params['idsO']);
            
        # route
        if(isset($params['route']) && $params['route'] != null)
            $q->andWhere('route= ?', $params['route']);        

        # categoryId
        if(isset($params['categoryId']) && $params['categoryId'] != null)
            $q->andWhere('category_id = ?', $params['categoryId']);

				# page type
        if(isset($params['type']) && $params['type'] != null)
            $q->andWhere('type = ?', $params['type']);
        
        # polloption pollId
        if(isset($params['pollId']) && $params['pollId'] != null)
            $q->andWhere('poll_id = ?', $params['pollId']);
                
				# contentId
        if(isset($params['contentId']) && $params['contentId'] != null)
            $q->andWhere('content_id = ?', $params['contentId']);
            
        # comment objectType, objectId
        if(isset($params['objectType']) && $params['objectType'] != null)
            $q->andWhere('object_type = ?', $params['objectType']);
        if(isset($params['objectId']) && $params['objectId'] != null)
            $q->andWhere('object_id = ?', $params['objectId']);
            
        # banner position
        if(isset($params['position']) && $params['position'] != null)
            $q->andWhere('position = ?', $params['position']);
       
        # isActive
        if(isset($params['isActive'])) {
            if($params['isActive'] != "all" && in_array($params['isActive'], array('0', '1')))
                $q->andWhere('is_active = ?', $params['isActive']);
        } else {
            $q->andWhere('is_active = ?', 1);
        }
        
        # isFeatured
        if(isset($params['isFeatured']) && in_array($params['isFeatured'], array('0', '1'))) 
            $q->andWhere('is_featured = ?', 1);
        if(isset($params['isTop']) && in_array($params['isTop'], array('0', '1'))) 
            $q->andWhere('is_top = ?', 1);
        if(isset($params['isNew']) && in_array($params['isNew'], array('0', '1'))) 
            $q->andWhere('is_new = ?', 1);

        # keyword
        if(isset($params['sCategory']) && $params['sCategory'] != null)
            $q->andWhere('name LIKE ? ', array('%'.$params['sCategory'].'%'));
        if(isset($params['sBanner']) && $params['sBanner'] != null)
            $q->andWhere('link LIKE ? ', array('%'.$params['sBanner'].'%'));
        if(isset($params['sFeedback']) && $params['sFeedback'] != null)
            $q->andWhere('organization LIKE ? OR name LIKE ? OR email LIKE ? OR message LIKE ?', array('%'.$params['sFeedback'].'%','%'.$params['sFeedback'].'%','%'.$params['sFeedback'].'%','%'.$params['sFeedback'].'%'));

        # group, order, limit
        if(isset($params['groupBy']) && $params['groupBy']) 
            $q->groupBy($params['groupBy']);

        if(isset($params['offset']) && $params['offset'])
            $q->offset($params['offset']);
        
        $limit = isset($params['limit']) ? $params['limit'] : sfConfig::get('app_limit', 30);
        $q->limit($limit);
  
        $order = isset($params['orderBy']) ? $params['orderBy'] : 'sort DESC, created_at DESC';
        $q->orderBy($order);

        return $q;
    }
    

    public static function doExecute($tableName, $columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($tableName, $q, $params);
        return $q->execute();
    }
    
  
    public static function doFetchArray($tableName, $columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($tableName, $q, $params);
        return $q->fetchArray();
    }
    
    
    public static function doFetchSelection($tableName, $fieldName, $columns = array(), $params = array())
    {
        $res = array();
        $rss = self::doFetchArray($tableName, $columns, $params);
        foreach ($rss as $rs) 
        {
            $res[$rs['id']] = $rs[$fieldName];
        }
        return $res;
    }
    
    public static function doFetchOne($tableName, $columns = array(), $params = array())
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $params['limit'] = 1;
        $q = self::params($tableName, $q, $params);
        return $q->fetchOne();
    }
    
    
    public static function getPager($tableName, $columns = array(), $params = array(), $page=1)
    {
        $q = Doctrine_Query::create()->select(join(',', $columns));
        $q = self::params($tableName, $q, $params);

        $pager = new sfDoctrinePager($tableName, sfConfig::get('app_pager', 30));
        $pager->setPage(GlobalLib::clearInput(intval($page)));
        $pager->setQuery($q);
        $pager->init();
        
        return $pager;
    }
    
    public static function doCount($tableName, $params = array())
    {
        $q = Doctrine_Query::create()->select('count(id)');
        $q = self::params($tableName, $q, $params);
        return $q->count();
    }
    
}